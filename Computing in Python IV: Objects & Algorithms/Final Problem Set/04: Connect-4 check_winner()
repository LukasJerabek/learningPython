#Write a function called check_winner which takes
#as input a 2D list. It should return "X" if there are four
#adjacent "X" values anywhere in the list (row, column,
#diagonal); "O" if there are four adjacent "O" values
#anywhere in the list; and None if there are neither.
#
#Here are the ways Connect-4 is different from tic-tac-toe:
#
# - Connect-4 is played with 6 rows and 7 columns, not 3
#   rows and 3 columns.
# - You must have 4 in a row (or column or diagonal) to win
#   instead of 3.
# - You may only place pieces in the bottom-most empty
#   space in a column (e.g. you "drop" the pieces in the
#   column and they fall to the first empty spot). Note,
#   though, that this shouldn't affect your reasoning.
#
#We use "X" and "O" to
#represent the players, and None to represent empty spots.
#You may assume there will be only one winner per board,
#no characters besides "X", "O", and None, and you don't
#have to worry about whether the board is actually a
#valid game of Connect 4.


def row(board):   

    for i in range(6):
        for j in range(4):                        
            if board[i][j] == board[i][j+1] == board[i][j+2] == board[i][j+3] == "X":
                return "X"            
            if board[i][j] == board[i][j+1] == board[i][j+2] == board[i][j+3] == "O":
                return "O"            
    return None
        
        
def column(board):  

    for i in range(7):
        for j in range(3):            
            if board[j][i] == board[j+1][i] == board[j+2][i] == board[j+3][i] == "X":
                return "X"            
            if board[j][i] == board[j+1][i] == board[j+2][i] == board[j+3][i] == "O":
                return "O"            
    return None


def diagonal1(board):  

    for i in range(3):
        for j in range(4):                        
            if board[i][j] == board[i+1][j+1] == board[i+2][j+2] == board[i+3][j+3] == "X":
                return "X"            
            if board[i][j] == board[i+1][j+1] == board[i+2][j+2] == board[i+3][j+3] == "O":
                return "O"            
    return None


def diagonal2(board):    

    for i in range(3):
        for j in range(3,7):                        
            if board[i][j] == board[i+1][j-1] == board[i+2][j-2] == board[i+3][j-3] == "X":
                return "X"            
            if board[i][j] == board[i+1][j-1] == board[i+2][j-2] == board[i+3][j-3] == "O":
                return "O"            
    return None
    

def check_winner(board):   

    if not diagonal1(board) == None:
        return diagonal1(board)
        
    if not diagonal2(board) == None:
        return diagonal2(board)
        
    if not column(board) == None:
        return column(board)
    
    if not row(board) == None:
        return row(board)
        
#Testing:

xwins = ((None, None, None, None, None, None, None),
         (None, None, None, None, None, None, None),
         (None, None, None, None, "X" , None, None),
         (None, None, None, "X" , "O" , "O", None),
         (None, "O" , "X" , "X" , "O" , "X", None),
         ("O" , "X" , "O" , "O" , "O" , "X" , "X"))
owins = ((None, None, None, None, None, None, None),
         (None, None, None, None, None, None, None),
         ("O" , "O" , "O" , "O" , None, None, None),
         ("O" , "X" , "X" , "X" , None, None, None),
         ("X" , "X" , "X" , "O" , "X" , None, None),
         ("X" , "O" , "O" , "X" , "O" , None, None))
nowins =(("X" , "X" , None, None, None, None, None),
         ("O" , "O" , None, None, None, None, None),
         ("O" , "X" , "O" , "O" , None, "O" , "O" ),
         ("O" , "X" , "X" , "X" , None, "X" , "X" ),
         ("X" , "X" , "X" , "O" , "X" , "X" , "O" ),
         ("X" , "O" , "O" , "X" , "O" , "X" , "O" ))
         
print(check_winner(xwins))
print(check_winner(owins))
print(check_winner(nowins))


